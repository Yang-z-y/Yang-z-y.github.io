<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python 十进制转换多进制</title>
      <link href="/2019/11/06/Python-%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E5%A4%9A%E8%BF%9B%E5%88%B6/"/>
      <url>/2019/11/06/Python-%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E5%A4%9A%E8%BF%9B%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="认识进制"><a href="#认识进制" class="headerlink" title="认识进制"></a>认识进制</h3><p> &ensp;  &ensp; 我们先来说说什么是进制，所谓的 ”进制“，就是用多少个字符来表示整数，十进制就是我们常接触到的 0~9 十个阿拉伯数字，二进制就是 0 1 这两个字符。</p><p> &ensp;  &ensp; 例如：$(89)_10$ 的对应二进制数为 $(1011001)_2$ ，采用的是 “除以2求余” 的算法， 将整数不断除以2，每次得到的余数就是由低到高的二进制位，而输出是从高到低，所以需要一个栈来反转次序。</p><p> &ensp;  &ensp; 十进制转二进制具体的转换方式是这样的：</p><img src="https://cdn.jsdelivr.net/gh/Yang-z-y/Blogs-Image@master/文章/Python-十进制转换多进制/1.png" style="margin-left: 20px;" /><p> &ensp;  &ensp; 二进制转十进制具体的转换方法是这样的：</p><p> &ensp;  &ensp; $(11101001)_2: 1 \times 2^7 + 1 \times 2^6 + 1 \times 2^5 + 0 \times 2^4 + 1 \times 2^3 + 0 \times 2^2 + 0 \times 2^1 + 1 \times 2^0 = (233)_10$</p><h3 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h3><p> &ensp;  &ensp; 首先我们需要先写好一个堆栈类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个列表当栈使用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.items = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断栈内是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.items == []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把一个元素放入栈中，放入的位置为列表末端</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.items.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把栈中最后一个元素删去</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.items.pop()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查看栈中最后一个元素是什么</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.items[len(self.items) - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查看栈中当前元素的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.items)</span><br></pre></td></tr></table></figure><p> &ensp;  &ensp; 写好后我们再写个方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个参数是十进制数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divideBy2_yzy</span><span class="params">(decNumber)</span>:</span></span><br><span class="line">    <span class="comment"># 创建一个栈</span></span><br><span class="line">    s = Stack()</span><br><span class="line">    <span class="comment"># 这个循环是用来判断传入的十进制数是否除尽了</span></span><br><span class="line">    <span class="keyword">while</span> decNumber &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 将十进制数对二取余，将余数放入栈中</span></span><br><span class="line">        s.push(decNumber % <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 将十进制数除以二，继续循环取余数除以二</span></span><br><span class="line">        decNumber //= <span class="number">2</span></span><br><span class="line">    <span class="comment"># 声明一个字符串变量，用来连接出栈的元素</span></span><br><span class="line">    binary = <span class="string">""</span></span><br><span class="line">    <span class="comment"># 循环抛出栈中的余数，如果栈为空说明全部抛出，循环结束</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> s.isEmpty():</span><br><span class="line">        <span class="comment"># 将每次抛出的数以字符形式合并起来</span></span><br><span class="line">        binary += <span class="string">""</span>.join(str(s.pop()))</span><br><span class="line">    <span class="comment"># 返回二进制数</span></span><br><span class="line">    <span class="keyword">return</span> binary</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">number1 = int(input(<span class="string">"输入一个十进制数："</span>))</span><br><span class="line">number2 = int(input(<span class="string">"再输入一个十进制数："</span>))</span><br><span class="line">print(<span class="string">"&#123;0&#125; 转为二进制数为：&#123;1&#125;"</span>.format(number1, divideBy2_yzy(number1)))</span><br><span class="line">print(<span class="string">"&#123;0&#125; 转为二进制数为：&#123;1&#125;"</span>.format(number2, divideBy2_yzy(number2)))</span><br></pre></td></tr></table></figure><p> &ensp;  &ensp; 得到的结果如下：</p><img src="https://cdn.jsdelivr.net/gh/Yang-z-y/Blogs-Image@master/文章/Python-十进制转换多进制/2.png" style="margin-left: 20px;" /><h3 id="十进制转多进制"><a href="#十进制转多进制" class="headerlink" title="十进制转多进制"></a>十进制转多进制</h3><p> &ensp;  &ensp; 在进制数中除了二进制和十进制，我们一般接触到的进制数还有八进制和十六进制，八进制是由八个阿拉伯数字 0 ~ 7 表示，十六进制用十个阿拉伯数字和六个英文字母表示，因为只有 0 ~ 9 这十个数字，所以用 A，B，C，D，E，F 这六个字母分别表示 10 ~ 15，字母不区分大小写。</p><p> &ensp;  &ensp; 下面我们来讲实现方法，其实十进制转多进制只要在我们上面十转二的基础上添加一些代码即可，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个 decNumber 参数是十进制，第二个参数 base 是你要转换的进制类型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divideByN_yzy</span><span class="params">(decNumber, base)</span>:</span></span><br><span class="line">    <span class="comment"># 建立一个含有二至十六进制元素的列表</span></span><br><span class="line">    number_list = list(<span class="string">"0123456789ABCDEF"</span>)</span><br><span class="line">    <span class="comment"># 创建一个栈</span></span><br><span class="line">    s = Stack()</span><br><span class="line">    <span class="comment"># 判断传入的十进制数是否除尽了</span></span><br><span class="line">    <span class="keyword">while</span> decNumber &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 将十进制数对 base 取余，将余数放入栈中</span></span><br><span class="line">        s.push(decNumber % base)</span><br><span class="line">        <span class="comment"># 将十进制数除以 base，继续循环取余数除以 base</span></span><br><span class="line">        decNumber //= base</span><br><span class="line">    <span class="comment"># 声明一个字符串变量，用来连接出栈的元素</span></span><br><span class="line">    baseNumber = <span class="string">""</span></span><br><span class="line">    <span class="comment"># 循环抛出栈中的余数，如果栈为空说明全部抛出，循环结束</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> s.isEmpty():</span><br><span class="line">        <span class="comment"># 每次抛出的数是对 base 取的余数，以余数当成索引查找对应的进制数列表，以字符形式合并起来</span></span><br><span class="line">        baseNumber += <span class="string">""</span>.join(number_list[s.pop()])</span><br><span class="line">    <span class="comment"># 返回 base 进制数</span></span><br><span class="line">    <span class="keyword">return</span> baseNumber</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">print(<span class="string">"输入两个数，第一个数是十进制数，第二个数是你想转换的进制数，以空格隔开，我们测试五次："</span>)</span><br><span class="line">number = []</span><br><span class="line">base = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    number_, base_ = map(int, input(<span class="string">"第 &#123;0&#125; 次测试: "</span>.format(_+<span class="number">1</span>)).split())</span><br><span class="line">    number.append(number_); base.append(base_)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(<span class="string">"十进制数: &#123;0&#125;，转 &#123;1&#125; 进制为：&#123;2&#125;"</span>.format(number[_], base[_], divideByN_yzy(number[_], base[_])))</span><br></pre></td></tr></table></figure><p> &ensp;  &ensp; 测试结果如下：</p><img src="https://cdn.jsdelivr.net/gh/Yang-z-y/Blogs-Image@master/文章/Python-十进制转换多进制/3.png" style="margin-left: 20px;" /><h3 id="十进制转多进制递归写法"><a href="#十进制转多进制递归写法" class="headerlink" title="十进制转多进制递归写法"></a>十进制转多进制递归写法</h3><p> &ensp;  &ensp; 如果上面出栈入栈把你看懵了的话，那么递归算法大概能让你更好理解，从上面我们得知十进制数就是 0 ~ 9 十个阿拉伯数字，十六进制数是在十进制数的基础上加上 A ~ F 这六个英文字母，所以我们可以列出一张 0 ~ F 十六进制的表出来，到时候我们只要拆成一系列比你要转的进制数小的整数取余，再逐个查表就行了。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursion</span><span class="params">(num, base)</span>:</span></span><br><span class="line">    <span class="comment"># 十六进制数查询表</span></span><br><span class="line">    convertString = <span class="string">"0123456789ABCDEF"</span></span><br><span class="line">    <span class="comment"># 如果数字要小于进制数，那么直接查表即可</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; base:</span><br><span class="line">        <span class="keyword">return</span> convertString[num]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 调用自身方法，并对数本身整除进制数再加上当前数对进制数取余的数</span></span><br><span class="line">        <span class="keyword">return</span> recursion(num // base, base) + convertString[num % base]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">print(<span class="string">"递归算法：输入两个数，第一个数是十进制数，第二个数是你想转换的进制数，以空格隔开，我们测试七次："</span>)</span><br><span class="line">convertStringList = [<span class="string">"二"</span>, <span class="string">"三"</span>, <span class="string">"四"</span>, <span class="string">"五"</span>, <span class="string">"六"</span>, <span class="string">"七"</span>, <span class="string">"八"</span>, <span class="string">"九"</span>, <span class="string">"十"</span>, <span class="string">"十一"</span>, <span class="string">"十二"</span>, <span class="string">"十三"</span>, <span class="string">"十四"</span>, <span class="string">"十五"</span>, <span class="string">"十六"</span>]</span><br><span class="line">number = []</span><br><span class="line">base = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    number_, base_ = map(int, input(<span class="string">"第 &#123;0&#125; 次测试: "</span>.format(_+<span class="number">1</span>)).split())</span><br><span class="line">    number.append(number_); base.append(base_)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    print(<span class="string">"十进制数: &#123;0&#125;，转&#123;1&#125;进制为：&#123;2&#125;"</span>.format(number[_], convertStringList[base[_] - <span class="number">2</span>], recursion(number[_], base[_])))</span><br></pre></td></tr></table></figure><p> &ensp;  &ensp; 测试结果如下：</p><img src="https://cdn.jsdelivr.net/gh/Yang-z-y/Blogs-Image@master/文章/Python-十进制转换多进制/4.png" style="margin-left: 20px;" /><div class="note warning">            <p><strong>注意事项：python 中 input() 默认输入的是字符串，所以我们需要用 int() 去将字符串转换为整数型</strong></p>          </div><div class="note info">            <p><strong>进制小知识：其实除了二、八、十、十六进制数外，还有三进制数、四进制数、五进制数等。</strong></p><p><strong>三进制：以3为底数的进位制，三进制数有0、1、2三个数码，逢三进一。</strong></p><p><strong>四进制：以4为基数，用0，1，2，3表示的一种计算实数的一种进制。因其具体算法为逢四进一，故而得名。</strong></p><p><strong>五进制：是数据的一种表示方法。就是逢五进一，不管什么进制数，把它化成十进制数均采用它的“按权展开式”实现，即每一位上的数码乘以该位的权值（基数的位数次方）之和。</strong></p><p><strong>后面以此类推，至于求法都是一个道理。</strong></p>          </div><div class="note success no-icon">            <p>以上就是使用 python 语言来实现十进制数转多进制数的方法啦 QwQ，如果你是小白不懂可以反复阅读本篇文章或是上网查找其他资料 (*^▽^*)，如果你是大神要是发现有问题或是我还可以有什么可以改进的地方可以提出相关意见，谢谢阅读 ~ (〃’▽’〃)</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven 项目隐藏 IDEA 日志信息</title>
      <link href="/2019/11/02/%E9%9A%90%E8%97%8F-IDEA-%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF/"/>
      <url>/2019/11/02/%E9%9A%90%E8%97%8F-IDEA-%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>在使用 IDEA 编写 spark 的时候，每次在控制台都会出现这么多的日志消息</p><p><img src="https://cdn.jsdelivr.net/gh/Yang-z-y/Blogs-Image@master/%E6%96%87%E7%AB%A0/%E9%9A%90%E8%97%8F-IDEA-%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF/1.png" alt="博客图片"></p><p>看起来很是不方便，下面我就来说说隐藏这些日志消息的两种方法.</p><h3 id="方法一：用代码隐藏"><a href="#方法一：用代码隐藏" class="headerlink" title="方法一：用代码隐藏"></a>方法一：用代码隐藏</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.&#123;<span class="type">Level</span>, <span class="type">Logger</span>&#125; <span class="comment">// 这里导入需要的包</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置的日志等级为最高的 ERROR, 这样除了报错消息其他日志消息都不会显示</span></span><br><span class="line">    <span class="type">Logger</span>.getLogger(<span class="string">"org"</span>).setLevel(<span class="type">Level</span>.<span class="type">ERROR</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local"</span>).setAppName(<span class="string">"Demo"</span>)</span><br><span class="line">        <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"></span><br><span class="line">        println(<span class="string">"Hello Spark"</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台显示结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/Yang-z-y/Blogs-Image@master/%E6%96%87%E7%AB%A0/%E9%9A%90%E8%97%8F-IDEA-%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF/2.png" alt="文章图片"></p><p>输出结果一目了然，如果你不想每次都用代码去隐藏日志消息，下面我们就使用方法二配置文件来隐藏日志消息。</p><h3 id="方法二：设置配置文件隐藏"><a href="#方法二：设置配置文件隐藏" class="headerlink" title="方法二：设置配置文件隐藏"></a>方法二：设置配置文件隐藏</h3><p>在你 project 里找到 “你的项目名”/src/main/resources 在 resources 这个文件夹下面新建 log4j.properties 配置文件，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Yang-z-y/Blogs-Image@master/%E6%96%87%E7%AB%A0/%E9%9A%90%E8%97%8F-IDEA-%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF/3.png" alt="文章图片"></p><p>在 log4j.properties 里面放入如下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Global logging configuration</span></span><br><span class="line"><span class="comment"># ERROR 为你设置的日志等级</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">ERROR, stdout</span></span><br><span class="line"><span class="comment"># Console output...</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n</span></span><br></pre></td></tr></table></figure><p>我们在跑一下程序看看：</p><p><img src="https://cdn.jsdelivr.net/gh/Yang-z-y/Blogs-Image@master/%E6%96%87%E7%AB%A0/%E9%9A%90%E8%97%8F-IDEA-%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF/4.png" alt="文章图片"></p><p>以上就是隐藏 Spark 日志的两种方法了，感谢阅读本篇文章.</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First Java Procedure</title>
      <link href="/2019/10/30/First-Java-Procedure/"/>
      <url>/2019/10/30/First-Java-Procedure/</url>
      
        <content type="html"><![CDATA[<h5 id="第一个-Java-程序"><a href="#第一个-Java-程序" class="headerlink" title="第一个 Java 程序."></a>第一个 Java 程序.</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 程序主入口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] yzy)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用静态方法 hi()</span></span><br><span class="line">        Hello.hi();</span><br><span class="line">        <span class="comment">// 结束程序</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 私有的静态方法 hi() </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 打印输出 Hello World</span></span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
